/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_UART4_Init(void);
static void MX_UART5_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t Buff[1];
uint8_t var=0xFF;
uint8_t Brr[] = {0x00};
uint8_t Brrr[] = {0x08};// buvo 0x05
uint8_t Brrrr[] = {0x10};

uint32_t Ta;
uint32_t Tb;

uint8_t xh[];
uint8_t xl[];
uint8_t yh[];
uint8_t yl[];
uint8_t zh[];
uint8_t zl[];

uint8_t xha[];
uint8_t xla[];
uint8_t yha[];
uint8_t yla[];
uint8_t zha[];
uint8_t zla[];

int16_t x;
int16_t y;
int16_t z;

int16_t xaa;
int16_t yaa;
int16_t zaa;

double l;
double xan;
double yan;
double zan;

int32_t bx;
int32_t by;
int32_t bz;

double xk;
double yk;
double zk;

double xi=0;
double yi=0;
double zi=0;

double xv;
double yv;
double zv;

double k = 0.000264707; //rad
//double k = 0.0151666; //deg


double xvs=100;
double yvs=0;
double zvs=0;

char xa[20];
char ya[20];
char za[20];

char axa[20];
char aya[20];
char aza[20];

char Ts[20];

char xka[20];
char yka[20];
char zka[20];

char bendras[120];

char temp[20];

uint32_t cycles = 1024;

char A[8];
char B[8];
char C[8];
char D[8];
char E[8];
char F[8];

#define BUFFER_SIZE 64

uint16_t pitch = 1500;
uint16_t roll = 1500;
int16_t KK=0;
int16_t KKD=0;
int16_t vk=8;

uint16_t NK=0;
double GK=0;

uint8_t MM[] = {0x01};
uint8_t xhm[];
uint8_t xlm[];
uint8_t yhm[];
uint8_t ylm[];
uint8_t zhm[];
uint8_t zlm[];
uint16_t xm;
uint16_t ym;
uint16_t zm;
int16_t nx;
int16_t ny;
int16_t nz;
int32_t nl;
double MK;
double asx;
double asz;



uint8_t R[BUFFER_SIZE];
uint8_t P[BUFFER_SIZE];
uint16_t K[6];

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

	double xvs=100;            // define initial inertial vector
	double yvs=0;
	double zvs=0;

		//double xi=0;
		//double yi=0;
		//double zi=0;

	uint32_t cc=0;


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_UART4_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */

  HAL_I2C_Mem_Write(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x6B, (uint16_t) 1, (uint8_t*)Brr, (uint16_t)1, 100); //config the MPU6050 during boot
  HAL_Delay(50);
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x1B, (uint16_t) 1, (uint8_t*)Brrr, (uint16_t) 1, 100);
  HAL_Delay(50);
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x1C, (uint16_t) 1, (uint8_t*)Brrrr, (uint16_t) 1, 100);
  HAL_Delay(50);
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x6B, (uint16_t) 1, (uint8_t*)Brr, (uint16_t)1, 100);
  HAL_Delay(50);
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x1B, (uint16_t) 1, (uint8_t*)Brrr, (uint16_t) 1, 100);
  HAL_Delay(50);
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x1C, (uint16_t) 1, (uint8_t*)Brrrr, (uint16_t) 1, 100);
  HAL_Delay(50);

  for (uint32_t i = 0; i < cycles; ++i) {
	      HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x43, (uint16_t) 1, (uint8_t*) xh, (uint16_t) 1, 100); //read data for zero offset
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x44, (uint16_t) 1, (uint8_t*) xl, (uint16_t) 1, 100);
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x45, (uint16_t) 1, (uint8_t*) yh, (uint16_t) 1, 100);
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x46, (uint16_t) 1, (uint8_t*) yl, (uint16_t) 1, 100);
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x47, (uint16_t) 1, (uint8_t*) zh, (uint16_t) 1, 100);
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x48, (uint16_t) 1, (uint8_t*) zl, (uint16_t) 1, 100);

	  	  x = (uint16_t)(((uint16_t)xh[0] << 8) | (uint16_t)xl[0]); //get 16bit raw values
	  	  y = (uint16_t)(((uint16_t)yh[0] << 8) | (uint16_t)yl[0]);
	  	  z = (uint16_t)(((uint16_t)zh[0] << 8) | (uint16_t)zl[0]);

	  	  bx=bx+x; // add up all the zero offset
	  	  by=by+y;
	  	  bz=bz+z;
      }

  int32_t abx=bx/(int32_t)cycles; //get average zero offset, or 'bias'
  int32_t aby=by/(int32_t)cycles;
  int32_t abz=bz/(int32_t)cycles;

  HAL_TIM_Base_Start(&htim2); //start a 32 bit timer running on 1MHz for timing

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //servoooo
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

  Ta = __HAL_TIM_GET_COUNTER(&htim2);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  cc++;
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x43, (uint16_t) 1, (uint8_t*) xh, (uint16_t) 1, 100); // read values
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x44, (uint16_t) 1, (uint8_t*) xl, (uint16_t) 1, 100);
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x45, (uint16_t) 1, (uint8_t*) yh, (uint16_t) 1, 100);
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x46, (uint16_t) 1, (uint8_t*) yl, (uint16_t) 1, 100);
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x47, (uint16_t) 1, (uint8_t*) zh, (uint16_t) 1, 100);
	  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x48, (uint16_t) 1, (uint8_t*) zl, (uint16_t) 1, 100);

	  	  x = (uint16_t)(((uint16_t)xh[0] << 8) | (uint16_t)xl[0]); // get 16bit raw data
	  	  y = (uint16_t)(((uint16_t)yh[0] << 8) | (uint16_t)yl[0]);
	  	  z = (uint16_t)(((uint16_t)zh[0] << 8) | (uint16_t)zl[0]);

	  	  int32_t cx = (int32_t)abx - (int32_t)x; //subtract raw data from zero offset, zeroing and flipping sign
	  	  int32_t cy = (int32_t)aby - (int32_t)y;
	  	  int32_t cz = (int32_t)abz - (int32_t)z;

	  	  uint32_t Tb = (uint32_t)Ta;
	  	  Ta = __HAL_TIM_GET_COUNTER(&htim2);
	  	  uint32_t T = (uint32_t)Ta - (uint32_t)Tb; // get time in microseconds since last cycle
	  	  //sprintf(Ts, "%d", T);

	  	  double a=(double)cx * (double)k * (double)T/1000000.0; // zeroed raw data * coefficient * time step = angular change in each axis since last cycle
	  	  double b=(double)cy * (double)k * (double)T/1000000.0;
	  	  double g=(double)cz * (double)k * (double)T/1000000.0;

	  	  double xv=(xvs*(1-(b*b/2.0))*(1-(g*g/2.0)))-(yvs*(1-(b*b/2.0))*g)+(zvs*b);
	  	  double yv=(xvs*(a*b*(1-(g*g/2.0))+(1-(a*a/2.0))*g))+(yvs*((1-(a*a/2.0))*(1-(g*g/2.0))-a*b*g))-(zvs*a*(1-(b*b/2.0)));
	  	  double zv=(xvs*(a*g-(1-(a*a/2.0))*b*(1-(g*g/2.0))))+(yvs*((1-(a*a/2.0))*b*g+a*(1-(g*g/2.0))))+(zvs*(1-(a*a/2.0))*(1-(b*b/2.0))); //'update' inertial vector by multiplying 'old' vector with rotation matrix, which uses small angle approximation

	  	  GK=GK+(a*57.3*xv/100)+(b*57.3*yv/100);
	  	  if(GK>360){GK=GK-360;}
	  	  if(GK<0){GK=GK+360;}

	  	  if(K[5]==2000){
	  		  NK=(K[4]-1000)*9/25;
	  		  KK=GK-NK;
	  		  if(KK>180){KK=KK-360;}
	  		  if(KK<-180){KK=KK+360;}
	  		  KK=KK*10;
	  		  KKD=a*350*xv+b*350*yv;
	  		  if(KK>350){KK=350;}
	  		  if(KK<-350){KK=-350;}
	  		  if(KKD>100){KKD=100;}
	  		  if(KKD<-100){KKD=-100;}
	  		  vk=10;
	  	  }else{
	  		  KK=0;
	  		  KKD=0;
	  		  vk=8;
	  	  }


	  	  roll = K[0] + yv*vk + KK + KKD;
	  	  pitch = K[1] + zv*8;

	  	  if(roll<900){roll=900;}
	  	  if(roll>2100){roll=2100;}
	  	  if(pitch<900){pitch=900;}
	  	  if(pitch>2100){pitch=2100;}


	  	  TIM1->CCR1=roll-93; //servo write with trim
	      TIM1->CCR2=pitch-26;



	  	  if (cc == 19) {   // print data every 20th cycle

	  	  int16_t xxx = (int16_t)floor(xv);
	  	  int16_t yyy = (int16_t)floor(yv);
	  	  int16_t zzz = (int16_t)floor(zv);

		  //sprintf(A, "%d", K[0]);
		  //sprintf(B, "%d", K[1]);
		  //sprintf(C, "%d", K[2]);
		  //sprintf(D, "%d", K[3]);
		  //sprintf(E, "%d", K[4]);
		  //sprintf(F, "%d", K[5]);
	  	  //sprintf(xa, "%d", xxx);
	  	  //sprintf(ya, "%d", yyy);
	  	  //sprintf(za, "%d", zzz);
	  	  //snprintf(bendras, sizeof(bendras), "%s %s %s %s %s %s %s %s %s", A, B, C, D, E, F, xa, ya, za);

	  	  sprintf(A, "%d", roll);
	  	  sprintf(B, "%d", (int16_t)floor(MK));
	  	  sprintf(C, "%d", (int16_t)floor(GK));
	  	  sprintf(D, "%d", NK);
	  	  snprintf(bendras, sizeof(bendras), "%s %s %s %s", A, B, C, D);

	  	  HAL_UART_Transmit(&huart5, &bendras, strlen(bendras), (uint32_t) 200); //transmit string via UART for reading using UART->TTL converter and YAT
	  	  cc=0;  // reset special cycles
	  	  }

	  	  if (cc == 11) { // special cycle for drift compensation
	  		      HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x3B, (uint16_t) 1, (uint8_t*) xha, (uint16_t) 1, 100); // get raw accelerometer data
	  		  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x3C, (uint16_t) 1, (uint8_t*) xla, (uint16_t) 1, 100);
	  		  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x3D, (uint16_t) 1, (uint8_t*) yha, (uint16_t) 1, 100);
	  		  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x3E, (uint16_t) 1, (uint8_t*) yla, (uint16_t) 1, 100);
	  		  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x3F, (uint16_t) 1, (uint8_t*) zha, (uint16_t) 1, 100);
	  		  	  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x68 << 1), (uint16_t) 0x40, (uint16_t) 1, (uint8_t*) zla, (uint16_t) 1, 100);

	  		  	  xaa = (uint16_t)(((uint16_t)xha[0] << 8) | (uint16_t)xla[0]); // get 16bit value
	  		  	  yaa = (uint16_t)(((uint16_t)yha[0] << 8) | (uint16_t)yla[0]);
	  		  	  zaa = (uint16_t)(((uint16_t)zha[0] << 8) | (uint16_t)zla[0])+200; // this axis had some offset
	  	    	  l=sqrt((double)xaa*(double)xaa+(double)yaa*(double)yaa+(double)zaa*(double)zaa); // get lenght of the vector
	  		  	  xan=xaa*100/l; // normalize the vector
	  		  	  yan=yaa*100/l;
	  		  	  zan=zaa*100/l;
	  		  	  xv=xv*0.999+xan*0.001; // 'blend' in 0.1% of accelerometer vector for drift compensation
	  		  	  yv=yv*0.999+yan*0.001;
	  		  	  zv=zv*0.999+zan*0.001;
	  	  }
	  	  if (cc == 6 || cc == 16){
	  		      //sprintf(A, "%d", K[0]);
	  			  //sprintf(B, "%d", K[1]);
	  			  //sprintf(C, "%d", K[2]);
	  			  //sprintf(D, "%d", K[3]);
	  			  //sprintf(E, "%d", K[4]);
	  			  //sprintf(F, "%d", K[5]);
	  			  //snprintf(bendras, sizeof(bendras), "%s %s %s %s %s %s", A, B, C, D, E, F);
	  			  //HAL_UART_Transmit(&huart5, &bendras, sizeof(bendras), 20);   // using different UART to print data and read using UART->USB and YAT

	  			  HAL_UART_Receive_IT(&huart4, R, BUFFER_SIZE);
	  	  }

	  	  xvs=xv; // 'new' inertial vector becomes 'old'
	  	  yvs=yv;
	  	  zvs=zv;

	  	  if(cc==17){
	  		HAL_I2C_Mem_Write(&hi2c1, (uint16_t) (0x30 << 1), (uint16_t) 0x08, (uint16_t) 1, (uint8_t*)MM, (uint16_t)1, 100);
	  	  }
	  	  if(cc==2){
	  		  if(yv>-20 && yv<20 && zv>-20 && zv<20){
	  			      HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x30 << 1), (uint16_t) 0x00, (uint16_t) 1, (uint8_t*) xlm, (uint16_t) 1, 100);
	  				  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x30 << 1), (uint16_t) 0x01, (uint16_t) 1, (uint8_t*) xhm, (uint16_t) 1, 100);
	  				  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x30 << 1), (uint16_t) 0x02, (uint16_t) 1, (uint8_t*) ylm, (uint16_t) 1, 100);
	  				  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x30 << 1), (uint16_t) 0x03, (uint16_t) 1, (uint8_t*) yhm, (uint16_t) 1, 100);
	  				  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x30 << 1), (uint16_t) 0x04, (uint16_t) 1, (uint8_t*) zlm, (uint16_t) 1, 100);
	  				  HAL_I2C_Mem_Read(&hi2c1, (uint16_t) (0x30 << 1), (uint16_t) 0x05, (uint16_t) 1, (uint8_t*) zhm, (uint16_t) 1, 100);

	  				  xm = (uint16_t)(((uint16_t)xhm[0] << 8) | (uint16_t)xlm[0]);
	  				  ym = (uint16_t)(((uint16_t)yhm[0] << 8) | (uint16_t)ylm[0]);
	  				  zm = (uint16_t)(((uint16_t)zhm[0] << 8) | (uint16_t)zlm[0]);

	  				  nx=xm-32768;
	  				  ny=ym-32768;
	  				  nz=zm-32768;
	  				  nl=sqrt(nx*nx+nz*nz);
	  				  asx=(double)nx/(double)nl;
	  				  asz=(double)nz/(double)nl;

	  				  if(nz>0){
	  					  MK=57.3*asin(asx)+90;
	  				  }else{
	  					  MK=270-57.3*asin(asx);
	  				  }
	  				  if(MK>315){
	  					  MK=57.3*asin(asz)+360;
	  				  }
	  				  if(MK<45){
	  				      MK=57.3*asin(asz);
	  				  }
	  				  if(MK>135 && MK<225){
	  					  MK=180-57.3*asin(asz);
	  				  }
	  				  if(MK>GK+180){MK=MK-360;}
	  				  if(MK<GK-180){MK=MK+360;}
	  				  GK=GK*0.9+MK*0.1;
	  		  }

	  	  }


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x0000020B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 7;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 10000;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

	  for (int i = 0; i < BUFFER_SIZE - 1; ++i) {
	          if (R[i] == 0x20 && R[i + 1] == 0x40) { // iBus packet is 32 bits long, and always begins with 0x20 folowed by 0x40, and encoding ensures this combination never appears in payload
	        	  P[0]=R[i+2]; // don't worry, later I learned how to use while() loop
	        	  P[1]=R[i+3];
	        	  P[2]=R[i+4];
	        	  P[3]=R[i+5];
	        	  P[4]=R[i+6];
	        	  P[5]=R[i+7];
	        	  P[6]=R[i+8];
	        	  P[7]=R[i+9];
	        	  P[8]=R[i+10];
	        	  P[9]=R[i+11];
	        	  P[10]=R[i+12];
	        	  P[11]=R[i+13];

	        	  K[0]=(uint16_t)(((uint16_t)P[1] << 8) | (uint16_t)P[0]); // get 16 bit values
	        	  K[1]=(uint16_t)(((uint16_t)P[3] << 8) | (uint16_t)P[2]); // Ch2
	        	  K[2]=(uint16_t)(((uint16_t)P[5] << 8) | (uint16_t)P[4]); // Ch3
	        	  K[3]=(uint16_t)(((uint16_t)P[7] << 8) | (uint16_t)P[6]); // Ch4 and you get the idea
	        	  K[4]=(uint16_t)(((uint16_t)P[9] << 8) | (uint16_t)P[8]); // iBus always gives 16bit value between 1000 and 2000
	        	  K[5]=(uint16_t)(((uint16_t)P[11] << 8) | (uint16_t)P[10]); // corresponding to lenght of ON in servo signal in us



	        	  i=BUFFER_SIZE-1;
	      }
	  }

	  //HAL_UART_Transmit(&huart4, R, BUFFER_SIZE, 20);
	  memset(R, 0, BUFFER_SIZE);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
